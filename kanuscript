#Kanuscript supports basic data types such as integers, floating-point numbers, strings, booleans, and characters. Kanuscript also supports complex data types such as arrays, lists, and maps.#

kant x = 5;
kant y = 3.14;
kanstring name = "John";
kantlist<Integer> numbers = new kantlist<Integer>();
numbers.add(1);
numbers.add(2);
numbers.add(3);
kantmap<String, Integer> ages = new kantmap<String, Integer>();
ages.put("John", 30);
ages.put("Jane", 25);

#or#

#Kanuscript uses the kant keyword to declare variables. Variables are strongly typed and their type cannot be changed after initialization.#

kant x = 5;
kanstring name = "John";
kant[] numbers = {1, 2, 3};

#Kanuscript uses the kant keyword to declare variables. Variables are strongly typed and their type cannot be changed after initialization.#

kant x = 5 + 3; // addition
kant y = 5 > 3; // greater than
kanbool z = true && false; // logical AND
x += 2; // addition assignment

#Kanuscript supports if-else statements, loops, and switch statements.#

if (x > 0) {
  System.out.println("x is positive");
} else if (x == 0) {
  System.out.println("x is zero");
} else {
  System.out.println("x is negative");
}

kant i = 0;
while (i < 10) {
  System.out.println(i);
  i++;
}


#Kanuscript supports polymorphism, which allows objects to be treated as instances of their parent class or any of their child classes.#

Person person = new Student("John", 30, 10);
System.out.println(person.sayHello());

for (kant i = 0; i < numbers.length; i++) {
  System.out.println(numbers[i]);
}

switch (x) {
  case 1:
    System.out.println("x is one");
    break;
  case 2:
    System.out.println("x is two");
    break;
  default:
    System.out.println("x is neither one nor two");
}


#Kanuscript supports functions, which are reusable blocks of code that can take parameters and return values.#


kantion add(kant x, kant y) {
  return x + y;
}

kant sum = add(3, 4);

#Kanuscript supports single-line and multi-line comments.#


#Kanuscript supports object-oriented programming with classes, constructors, fields, and methods#

kantclass Person {
  kanstring name;
  kant age;
  
  Person(kanstring name, kant age) {
    this.name = name;
    this.age = age;
  }
  
  kantion sayHello() {
    return "Hello, my name is " + this.name;
  }
}

Person person = new Person("John", 30);
System.out.println(person.sayHello());

#Kanuscript supports inheritance, which allows classes to inherit fields and methods from a parent class.#

kantclass Student extends Person {
  kant grade;
  
  Student

